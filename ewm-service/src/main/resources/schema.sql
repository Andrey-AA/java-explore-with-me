drop table IF EXISTS users, categories, location, events, requests, compilations, event_compilations, comments CASCADE;

create TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(250) NOT NULL,
  email VARCHAR NOT NULL,
  CONSTRAINT pk_user PRIMARY KEY (id),
  CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

create TABLE IF NOT exists categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(50) NOT NULL,
  CONSTRAINT UQ_category_name UNIQUE (name),
  CONSTRAINT pk_category PRIMARY KEY (id)
);

create TABLE IF NOT exists location (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  lat float NOT NULL,
  lon float NOT null,
  CONSTRAINT pk_location PRIMARY KEY (id)
);

create TABLE IF NOT exists events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  initiator_id int NOT null REFERENCES users(id),
  annotation VARCHAR(2000) NOT NULL,
  created_on timestamp without time zone not null,
  category_id int NOT null REFERENCES categories(id),
  description VARCHAR(7000) NOT NULL,
  event_date timestamp without time zone not null,
  location_id int NOT null REFERENCES location(id),
  paid bool NOT NULL,
  participant_limit int NOT null,
  published_on timestamp without time zone,
  request_moderation bool NOT NULL,
  state VARCHAR(10) NOT NULL,
  title VARCHAR(120) NOT null,
  CONSTRAINT pk_events PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  requester_id int NOT null REFERENCES users(id),
  event_id int NOT null REFERENCES events(id),
  status VARCHAR(10) NOT NULL,
  created timestamp without time zone not null default current_timestamp,
  CONSTRAINT pk_request PRIMARY KEY (id),
  CONSTRAINT UQ_REQUESTS unique (requester_id, event_id)
);

CREATE TABLE IF NOT EXISTS compilations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  pinned bool NOT NULL,
  title VARCHAR(50) NOT NULL,
  CONSTRAINT pk_compilations PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS event_compilations (
  compilation_id int REFERENCES compilations(id),
  event_id int REFERENCES events(id),
  CONSTRAINT PK_event_compilations PRIMARY KEY (compilation_id, event_id)
);

CREATE TABLE IF NOT EXISTS comments (
  id SERIAL PRIMARY KEY,
  created_date TIMESTAMP,
  updated_date TIMESTAMP,
  auther_id INTEGER NOT NULL,
  event_id INTEGER NOT NULL,
  text VARCHAR(2000),
  FOREIGN KEY (auther_id) REFERENCES users(id),
  FOREIGN KEY (event_id) REFERENCES events(id)
);
